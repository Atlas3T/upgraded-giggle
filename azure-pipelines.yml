trigger:
- develop

pool:
  vmImage: 'windows-2019'

steps:
  # Enable long paths
  - bash: |
      git config --system core.longpaths true
    displayName: 'allow looooooong paths'

  # Get source
  - bash: |
      git submodule update --init --force --recursive
    displayName: 'Clone submodules'

  # Install dotnet
  - task: DotNetCoreInstaller@0
    displayName: 'Install .NetCore SDK'
    inputs:
      version: 3.0.100
      failOnStandardError: 'true'

  # Install rust toolchain
  - script: |
      curl -sSf -o rustup-init.exe https://win.rustup.rs
      rustup-init.exe -y --default-toolchain stable
      echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
    displayName: Windows install rust
    condition: eq( variables['Agent.OS'], 'Windows_NT' )

  # Build func
  - task: DotNetCoreCLI@2
    displayName: 'Build solution'
    inputs:
      projects: 'src/**/*.csproj'
      arguments: '--configuration $(BuildConfiguration)'
      failOnStandardError: 'true'

  # Copy files    
  - task: CopyFiles@2
    displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
    inputs:
      SourceFolder: '$(system.defaultworkingdirectory)'
      Contents: '**/azure-functions/**'
      TargetFolder: '$(build.artifactstagingdirectory)'
  # Create Archive : zip file
  - task: ArchiveFiles@2
    displayName: 'Archive $(build.artifactstagingdirectory)/target/azure-functions/$(functionAppMvnTargetFolder)'
    inputs:
      rootFolderOrFile: '$(build.artifactstagingdirectory)/target/azure-functions/$(functionAppMvnTargetFolder)'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
      replaceExistingArchive: true
  # Deploy using Azure App Service Deploy - Webdeployment
  - task: AzureRmWebAppDeployment@4
    displayName: 'Azure App Service Deploy'
    inputs:
      azureSubscription: '1232e929-30b6-4eda-b977-1116961439c8'
      appType: functionApp
      WebAppName: yourAppServiceName
      packageForLinux: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
      enableCustomDeployment: true
      DeploymentType: runFromZip    
      TakeAppOfflineFlag: false
      ExcludeFilesFromAppDataFlag: false
      RenameFilesFlag: false
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: drop'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'